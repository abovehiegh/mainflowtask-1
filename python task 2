import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

# Load Dataset
df = pd.read_csv("/content/Global_Superstore(CSV).csv")
print("Dataset loaded successfully!")

# General EDA Function
def general_eda():
    global df
    
    # Data Cleaning
    df.drop_duplicates(inplace=True)  # Remove duplicates
    
    # Handle missing values for numeric columns
    numeric_columns = df.select_dtypes(include=["number"]).columns  # Select numeric columns
    df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())  # Fill missing values for numeric columns

    # Handle missing values for non-numeric columns
    non_numeric_columns = df.select_dtypes(exclude=["number"]).columns  # Select non-numeric columns
    for column in non_numeric_columns:
        df[column] = df[column].fillna(df[column].mode()[0])  # Fill missing values with mode (most frequent value)
    
    print("Missing values handled successfully!")

    # Detect and handle outliers using IQR for numeric columns
    for column in numeric_columns:
        Q1 = df[column].quantile(0.25)
        Q3 = df[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]  # Remove outliers

    print("Outliers handled successfully!")
    print(df.info())

# Sales Performance Analysis Function
def sales_performance_analysis():
    global df
    
    # Example analysis: predicting sales based on some features
    if 'Sales' in df.columns:
        target_column = 'Sales'
        feature_columns = [col for col in df.columns if col != target_column]
        
        # Check if there are enough numeric features
        numeric_features = df[feature_columns].select_dtypes(include=["number"]).columns
        if len(numeric_features) == 0:
            print("Not enough numeric features for analysis.")
            return
        
        # Use numeric features for regression
        X = df[numeric_features]
        y = df[target_column]
        
        # Train-test split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # Linear regression model
        model = LinearRegression()
        model.fit(X_train, y_train)
        
        # Predictions
        y_pred = model.predict(X_test)
        
        # Metrics
        r2 = r2_score(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        print(f"Sales Prediction R2 Score: {r2}")
        print(f"Mean Squared Error: {mse}")
    else:
        print("Target column 'Sales' not found in the dataset.")

# Run the tasks
general_eda()
sales_performance_analysis()
# General EDA Function
def general_eda():
    global df
    
    # Data Cleaning
    df.drop_duplicates(inplace=True)  # Remove duplicates
    
    # Handle missing values for numeric columns
    numeric_columns = df.select_dtypes(include=["number"]).columns  # Select numeric columns
    df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())  # Fill missing values for numeric columns

    # Handle missing values for non-numeric columns
    non_numeric_columns = df.select_dtypes(exclude=["number"]).columns  # Select non-numeric columns
    for column in non_numeric_columns:
        df[column] = df[column].fillna(df[column].mode()[0])  # Fill missing values with mode (most frequent value)
    
    print("Missing values handled successfully!")

    # Detect and handle outliers using IQR for numeric columns
    for column in numeric_columns:
        Q1 = df[column].quantile(0.25)
        Q3 = df[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]  # Remove outliers

    print("Outliers handled successfully!")
    print(df.info())

# Sales Performance Analysis Function
def sales_performance_analysis():
    global df
    
    # Example analysis: predicting sales based on some features
    if 'Sales' in df.columns:
        target_column = 'Sales'
        feature_columns = [col for col in df.columns if col != target_column]
        
        # Check if there are enough numeric features
        numeric_features = df[feature_columns].select_dtypes(include=["number"]).columns
        if len(numeric_features) == 0:
            print("Not enough numeric features for analysis.")
            return
        
        # Use numeric features for regression
        X = df[numeric_features]
        y = df[target_column]
        
        # Train-test split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # Linear regression model
        model = LinearRegression()
        model.fit(X_train, y_train)
        
        # Predictions
        y_pred = model.predict(X_test)
        
        # Metrics
        r2 = r2_score(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        print(f"Sales Prediction R2 Score: {r2}")
        print(f"Mean Squared Error: {mse}")
    else:
        print("Target column 'Sales' not found in the dataset.")

# Run the tasks
general_eda()
sales_performance_analysis()

Dataset loaded successfully!
Missing values handled successfully!
Outliers handled successfully!
<class 'pandas.core.frame.DataFrame'>
Index: 611 entries, 86 to 999
Data columns (total 24 columns):
 #   Column          Non-Null Count  Dtype  
---  ------          --------------  -----  
 0   Row ID          611 non-null    int64  
 1   Order ID        611 non-null    object 
 2   Order Date      611 non-null    object 
 3   Ship Date       611 non-null    object 
 4   Ship Mode       611 non-null    object 
 5   Customer ID     611 non-null    object 
 6   Customer Name   611 non-null    object 
 7   Segment         611 non-null    object 
 8   Postal Code     611 non-null    float64
 9   City            611 non-null    object 
 10  State           611 non-null    object 
 11  Country         611 non-null    object 
 12  Region          611 non-null    object 
 13  Market          611 non-null    object 
 14  Product ID      611 non-null    object 
 15  Category        611 non-null    object 
 16  Sub-Category    611 non-null    object 
 17  Product Name    611 non-null    object 
 18  Sales           611 non-null    float64
 19  Quantity        611 non-null    int64  
 20  Discount        611 non-null    float64
 21  Profit          611 non-null    float64
 22  Shipping Cost   611 non-null    float64
 23  Order Priority  611 non-null    object 
dtypes: float64(5), int64(2), object(17)
memory usage: 119.3+ KB
None
Sales Prediction R2 Score: 0.37396295114678335
Mean Squared Error: 439211.8527950802
Missing values handled successfully!
Outliers handled successfully!
<class 'pandas.core.frame.DataFrame'>
Index: 583 entries, 116 to 999
Data columns (total 24 columns):
 #   Column          Non-Null Count  Dtype  
---  ------          --------------  -----  
 0   Row ID          583 non-null    int64  
 1   Order ID        583 non-null    object 
 2   Order Date      583 non-null    object 
 3   Ship Date       583 non-null    object 
 4   Ship Mode       583 non-null    object 
 5   Customer ID     583 non-null    object 
 6   Customer Name   583 non-null    object 
 7   Segment         583 non-null    object 
 8   Postal Code     583 non-null    float64
 9   City            583 non-null    object 
 10  State           583 non-null    object 
 11  Country         583 non-null    object 
 12  Region          583 non-null    object 
 13  Market          583 non-null    object 
 14  Product ID      583 non-null    object 
 15  Category        583 non-null    object 
 16  Sub-Category    583 non-null    object 
 17  Product Name    583 non-null    object 
 18  Sales           583 non-null    float64
 19  Quantity        583 non-null    int64  
 20  Discount        583 non-null    float64
 21  Profit          583 non-null    float64
 22  Shipping Cost   583 non-null    float64
 23  Order Priority  583 non-null    object 
dtypes: float64(5), int64(2), object(17)
memory usage: 113.9+ KB
None
Sales Prediction R2 Score: 0.36141042410811053
Mean Squared Error: 446406.9383763393
